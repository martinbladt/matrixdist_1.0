// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// runge_kutta
void runge_kutta(arma::vec& avector, arma::mat& bvector, arma::mat& cmatrix, double dt, double h, const arma::mat& S, const arma::mat& s);
RcppExport SEXP _matrixdist_runge_kutta(SEXP avectorSEXP, SEXP bvectorSEXP, SEXP cmatrixSEXP, SEXP dtSEXP, SEXP hSEXP, SEXP SSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type avector(avectorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type bvector(bvectorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cmatrix(cmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    runge_kutta(avector, bvector, cmatrix, dt, h, S, s);
    return R_NilValue;
END_RCPP
}
// EMstep_RK
void EMstep_RK(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    EMstep_RK(h, alpha, S, obs, weight, rcens, rcweight);
    return R_NilValue;
END_RCPP
}
// a_rungekutta
void a_rungekutta(arma::vec& avector, double dt, double h, const arma::mat& S);
RcppExport SEXP _matrixdist_a_rungekutta(SEXP avectorSEXP, SEXP dtSEXP, SEXP hSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type avector(avectorSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    a_rungekutta(avector, dt, h, S);
    return R_NilValue;
END_RCPP
}
// logLikelihoodPH_RK
double logLikelihoodPH_RK(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodPH_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_RK(h, alpha, S, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_RK
double logLikelihoodMweibull_RK(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_RK
double logLikelihoodMpareto_RK(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_RK
double logLikelihoodMlognormal_RK(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_RK
double logLikelihoodMloglogistic_RK(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_RK
double logLikelihoodMgompertz_RK(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgev_RK
double logLikelihoodMgev_RK(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgev_RK(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgev_RK(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_RKs
double logLikelihoodPH_RKs(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodPH_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_RKs(h, alpha, S, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_RKs
double logLikelihoodMweibull_RKs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_RKs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_RKs
double logLikelihoodMpareto_RKs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_RKs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_RKs
double logLikelihoodMlognormal_RKs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_RKs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_RKs
double logLikelihoodMloglogistic_RKs(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_RKs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_RKs
double logLikelihoodMgompertz_RKs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_RKs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_RKs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// vector_of_matrices_2
void vector_of_matrices_2(std::vector<arma::mat>& vect, const arma::mat& S, int vect_size);
RcppExport SEXP _matrixdist_vector_of_matrices_2(SEXP vectSEXP, SEXP SSEXP, SEXP vect_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type vect(vectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type vect_size(vect_sizeSEXP);
    vector_of_matrices_2(vect, S, vect_size);
    return R_NilValue;
END_RCPP
}
// EMstep_PADE
void EMstep_PADE(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    EMstep_PADE(h, alpha, S, obs, weight, rcens, rcweight);
    return R_NilValue;
END_RCPP
}
// EMstep_MoE_PADE
Rcpp::List EMstep_MoE_PADE(arma::mat& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep_MoE_PADE(SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(EMstep_MoE_PADE(alpha, S, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// EMstep_bivph
void EMstep_bivph(arma::vec& alpha, arma::mat& S11, arma::mat& S12, arma::mat& S22, const Rcpp::NumericMatrix& obs, const Rcpp::NumericVector& weight);
RcppExport SEXP _matrixdist_EMstep_bivph(SEXP alphaSEXP, SEXP S11SEXP, SEXP S12SEXP, SEXP S22SEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S11(S11SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S12(S12SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S22(S22SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    EMstep_bivph(alpha, S11, S12, S22, obs, weight);
    return R_NilValue;
END_RCPP
}
// logLikelihoodPH_MoE
double logLikelihoodPH_MoE(arma::mat& alpha1, arma::mat& alpha2, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodPH_MoE(SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_MoE(alpha1, alpha2, S, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_PADE
double logLikelihoodPH_PADE(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodPH_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_PADE(h, alpha, S, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_PADE
double logLikelihoodMweibull_PADE(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_PADE
double logLikelihoodMpareto_PADE(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_PADE
double logLikelihoodMlognormal_PADE(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_PADE
double logLikelihoodMloglogistic_PADE(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_PADE
double logLikelihoodMgompertz_PADE(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgev_PADE
double logLikelihoodMgev_PADE(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgev_PADE(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgev_PADE(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_PADEs
double logLikelihoodPH_PADEs(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodPH_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_PADEs(h, alpha, S, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_PADEs
double logLikelihoodMweibull_PADEs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_PADEs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_PADEs
double logLikelihoodMpareto_PADEs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_PADEs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_PADEs
double logLikelihoodMlognormal_PADEs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_PADEs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_PADEs
double logLikelihoodMloglogistic_PADEs(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_PADEs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_PADEs
double logLikelihoodMgompertz_PADEs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_PADEs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_PADEs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// vector_of_matrices
void vector_of_matrices(std::vector<arma::mat>& vect, const arma::mat& S, double a, int vect_size);
RcppExport SEXP _matrixdist_vector_of_matrices(SEXP vectSEXP, SEXP SSEXP, SEXP aSEXP, SEXP vect_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<arma::mat>& >::type vect(vectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type vect_size(vect_sizeSEXP);
    vector_of_matrices(vect, S, a, vect_size);
    return R_NilValue;
END_RCPP
}
// m_exp_sum
arma::mat m_exp_sum(double x, int n, const std::vector<arma::mat>& pow_vector, double a);
RcppExport SEXP _matrixdist_m_exp_sum(SEXP xSEXP, SEXP nSEXP, SEXP pow_vectorSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type pow_vector(pow_vectorSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(m_exp_sum(x, n, pow_vector, a));
    return rcpp_result_gen;
END_RCPP
}
// pow2_matrix
void pow2_matrix(int n, arma::mat& A);
RcppExport SEXP _matrixdist_pow2_matrix(SEXP nSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    pow2_matrix(n, A);
    return R_NilValue;
END_RCPP
}
// find_n
int find_n(double h, double lambda);
RcppExport SEXP _matrixdist_find_n(SEXP hSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(find_n(h, lambda));
    return rcpp_result_gen;
END_RCPP
}
// EMstep_UNI
void EMstep_UNI(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    EMstep_UNI(h, alpha, S, obs, weight, rcens, rcweight);
    return R_NilValue;
END_RCPP
}
// logLikelihoodPH_UNI
double logLikelihoodPH_UNI(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodPH_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_UNI(h, alpha, S, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_UNI
double logLikelihoodMweibull_UNI(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_UNI
double logLikelihoodMpareto_UNI(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_UNI
double logLikelihoodMlognormal_UNI(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_UNI
double logLikelihoodMloglogistic_UNI(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_UNI
double logLikelihoodMgompertz_UNI(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgev_UNI
double logLikelihoodMgev_UNI(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMgev_UNI(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgev_UNI(h, alpha, S, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_UNIs
double logLikelihoodPH_UNIs(double h, arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodPH_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_UNIs(h, alpha, S, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMweibull_UNIs
double logLikelihoodMweibull_UNIs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMweibull_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMweibull_UNIs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMpareto_UNIs
double logLikelihoodMpareto_UNIs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMpareto_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMpareto_UNIs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMlognormal_UNIs
double logLikelihoodMlognormal_UNIs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMlognormal_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMlognormal_UNIs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMloglogistic_UNIs
double logLikelihoodMloglogistic_UNIs(double h, arma::vec& alpha, arma::mat& S, Rcpp::NumericVector beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMloglogistic_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMloglogistic_UNIs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMgompertz_UNIs
double logLikelihoodMgompertz_UNIs(double h, arma::vec& alpha, arma::mat& S, double beta, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight, const Rcpp::NumericVector& rcens, const Rcpp::NumericVector& rcweight, const Rcpp::NumericVector& scale1, const Rcpp::NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMgompertz_UNIs(SEXP hSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMgompertz_UNIs(h, alpha, S, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// expm_terms
Rcpp::List expm_terms(double h, arma::mat& S, const Rcpp::NumericVector& obs);
RcppExport SEXP _matrixdist_expm_terms(SEXP hSEXP, SEXP SSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(expm_terms(h, S, obs));
    return rcpp_result_gen;
END_RCPP
}
// random_reward
arma::mat random_reward(int p, int d);
RcppExport SEXP _matrixdist_random_reward(SEXP pSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(random_reward(p, d));
    return rcpp_result_gen;
END_RCPP
}
// rew_sanity_check
void rew_sanity_check(arma::mat& R, double tol);
RcppExport SEXP _matrixdist_rew_sanity_check(SEXP RSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rew_sanity_check(R, tol);
    return R_NilValue;
END_RCPP
}
// marginal_expectation
arma::vec marginal_expectation(arma::vec& rew, arma::vec& pos, int N, arma::vec& alpha, arma::mat& S, arma::vec& obs, arma::vec& weight);
RcppExport SEXP _matrixdist_marginal_expectation(SEXP rewSEXP, SEXP posSEXP, SEXP NSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type rew(rewSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_expectation(rew, pos, N, alpha, S, obs, weight));
    return rcpp_result_gen;
END_RCPP
}
// MPHstar_EMstep_UNI
void MPHstar_EMstep_UNI(double h, double Rtol, arma::vec& alpha, arma::mat& S, arma::mat& R, const Rcpp::List& mph_obs);
RcppExport SEXP _matrixdist_MPHstar_EMstep_UNI(SEXP hSEXP, SEXP RtolSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP RSEXP, SEXP mph_obsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type Rtol(RtolSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mph_obs(mph_obsSEXP);
    MPHstar_EMstep_UNI(h, Rtol, alpha, S, R, mph_obs);
    return R_NilValue;
END_RCPP
}
// embedded_mc
arma::mat embedded_mc(arma::mat S);
RcppExport SEXP _matrixdist_embedded_mc(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(embedded_mc(S));
    return rcpp_result_gen;
END_RCPP
}
// cumulate_matrix
arma::mat cumulate_matrix(arma::mat A);
RcppExport SEXP _matrixdist_cumulate_matrix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cumulate_matrix(A));
    return rcpp_result_gen;
END_RCPP
}
// cumulate_vector
arma::vec cumulate_vector(arma::vec A);
RcppExport SEXP _matrixdist_cumulate_vector(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cumulate_vector(A));
    return rcpp_result_gen;
END_RCPP
}
// initial_state
long initial_state(arma::vec cum_alpha, double u);
RcppExport SEXP _matrixdist_initial_state(SEXP cum_alphaSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type cum_alpha(cum_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_state(cum_alpha, u));
    return rcpp_result_gen;
END_RCPP
}
// new_state
long new_state(long prev_state, arma::mat cum_embedded_mc, double u);
RcppExport SEXP _matrixdist_new_state(SEXP prev_stateSEXP, SEXP cum_embedded_mcSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type prev_state(prev_stateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cum_embedded_mc(cum_embedded_mcSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(new_state(prev_state, cum_embedded_mc, u));
    return rcpp_result_gen;
END_RCPP
}
// rphasetype
Rcpp::NumericVector rphasetype(int n, arma::vec alpha, arma::mat S);
RcppExport SEXP _matrixdist_rphasetype(SEXP nSEXP, SEXP alphaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rphasetype(n, alpha, S));
    return rcpp_result_gen;
END_RCPP
}
// riph
Rcpp::NumericVector riph(int n, Rcpp::String dist_type, arma::vec alpha, arma::mat S, Rcpp::NumericVector beta);
RcppExport SEXP _matrixdist_riph(SEXP nSEXP, SEXP dist_typeSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dist_type(dist_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(riph(n, dist_type, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// rmatrixgev
Rcpp::NumericVector rmatrixgev(int n, arma::vec alpha, arma::mat S, double mu, double sigma, double xi);
RcppExport SEXP _matrixdist_rmatrixgev(SEXP nSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatrixgev(n, alpha, S, mu, sigma, xi));
    return rcpp_result_gen;
END_RCPP
}
// rdphasetype
Rcpp::NumericVector rdphasetype(int n, arma::vec alpha, arma::mat S);
RcppExport SEXP _matrixdist_rdphasetype(SEXP nSEXP, SEXP alphaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rdphasetype(n, alpha, S));
    return rcpp_result_gen;
END_RCPP
}
// rMPHstar
Rcpp::NumericMatrix rMPHstar(int n, arma::vec alpha, arma::mat S, arma::mat R);
RcppExport SEXP _matrixdist_rMPHstar(SEXP nSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(rMPHstar(n, alpha, S, R));
    return rcpp_result_gen;
END_RCPP
}
// n_pos
int n_pos(arma::vec R);
RcppExport SEXP _matrixdist_n_pos(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(n_pos(R));
    return rcpp_result_gen;
END_RCPP
}
// n_null
int n_null(arma::vec R);
RcppExport SEXP _matrixdist_n_null(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(n_null(R));
    return rcpp_result_gen;
END_RCPP
}
// plus_states
arma::vec plus_states(arma::vec R);
RcppExport SEXP _matrixdist_plus_states(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(plus_states(R));
    return rcpp_result_gen;
END_RCPP
}
// null_states
arma::vec null_states(arma::vec R);
RcppExport SEXP _matrixdist_null_states(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(null_states(R));
    return rcpp_result_gen;
END_RCPP
}
// Q_pos_pos
arma::mat Q_pos_pos(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_Q_pos_pos(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_pos_pos(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// Q_null_null
arma::mat Q_null_null(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_Q_null_null(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_null_null(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// Q_pos_null
arma::mat Q_pos_null(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_Q_pos_null(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_pos_null(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// Q_null_pos
arma::mat Q_null_pos(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_Q_null_pos(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_null_pos(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// q_pos
arma::vec q_pos(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_q_pos(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(q_pos(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// q_null
arma::vec q_null(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_q_null(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(q_null(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// new_trans_mat
arma::mat new_trans_mat(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_new_trans_mat(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(new_trans_mat(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// new_trans_exit
arma::vec new_trans_exit(arma::vec R, arma::mat Qtilda);
RcppExport SEXP _matrixdist_new_trans_exit(SEXP RSEXP, SEXP QtildaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    rcpp_result_gen = Rcpp::wrap(new_trans_exit(R, Qtilda));
    return rcpp_result_gen;
END_RCPP
}
// pi_pos
arma::rowvec pi_pos(arma::vec R, arma::vec alpha);
RcppExport SEXP _matrixdist_pi_pos(SEXP RSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(pi_pos(R, alpha));
    return rcpp_result_gen;
END_RCPP
}
// pi_null
arma::rowvec pi_null(arma::vec R, arma::vec alpha);
RcppExport SEXP _matrixdist_pi_null(SEXP RSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(pi_null(R, alpha));
    return rcpp_result_gen;
END_RCPP
}
// new_pi
arma::vec new_pi(arma::vec R, arma::mat Qtilda, arma::vec alpha);
RcppExport SEXP _matrixdist_new_pi(SEXP RSEXP, SEXP QtildaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(new_pi(R, Qtilda, alpha));
    return rcpp_result_gen;
END_RCPP
}
// new_exit_vec
arma::vec new_exit_vec(arma::vec R, arma::mat Qtilda, arma::mat S);
RcppExport SEXP _matrixdist_new_exit_vec(SEXP RSEXP, SEXP QtildaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(new_exit_vec(R, Qtilda, S));
    return rcpp_result_gen;
END_RCPP
}
// new_subint_mat
arma::mat new_subint_mat(arma::vec R, arma::mat Qtilda, arma::mat S);
RcppExport SEXP _matrixdist_new_subint_mat(SEXP RSEXP, SEXP QtildaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(new_subint_mat(R, Qtilda, S));
    return rcpp_result_gen;
END_RCPP
}
// transf_via_rew
Rcpp::List transf_via_rew(arma::mat R, arma::mat Qtilda, arma::vec alpha, arma::mat S);
RcppExport SEXP _matrixdist_transf_via_rew(SEXP RSEXP, SEXP QtildaSEXP, SEXP alphaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qtilda(QtildaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(transf_via_rew(R, Qtilda, alpha, S));
    return rcpp_result_gen;
END_RCPP
}
// matrix_product
Rcpp::NumericMatrix matrix_product(Rcpp::NumericMatrix A1, Rcpp::NumericMatrix A2);
RcppExport SEXP _matrixdist_matrix_product(SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_product(A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// matrix_inverse
Rcpp::NumericMatrix matrix_inverse(Rcpp::NumericMatrix A);
RcppExport SEXP _matrixdist_matrix_inverse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_inverse(A));
    return rcpp_result_gen;
END_RCPP
}
// phdensity
Rcpp::NumericVector phdensity(Rcpp::NumericVector x, arma::vec alpha, arma::mat S);
RcppExport SEXP _matrixdist_phdensity(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(phdensity(x, alpha, S));
    return rcpp_result_gen;
END_RCPP
}
// phcdf
Rcpp::NumericVector phcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, bool lower_tail);
RcppExport SEXP _matrixdist_phcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(phcdf(x, alpha, S, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mweibullden
Rcpp::NumericVector mweibullden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta);
RcppExport SEXP _matrixdist_mweibullden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mweibullden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mweibullcdf
Rcpp::NumericVector mweibullcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mweibullcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mweibullcdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mparetoden
Rcpp::NumericVector mparetoden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta);
RcppExport SEXP _matrixdist_mparetoden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mparetoden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mparetocdf
Rcpp::NumericVector mparetocdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mparetocdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mparetocdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mlognormalden
Rcpp::NumericVector mlognormalden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta);
RcppExport SEXP _matrixdist_mlognormalden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mlognormalden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mlognormalcdf
Rcpp::NumericVector mlognormalcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mlognormalcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mlognormalcdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mloglogisticden
Rcpp::NumericVector mloglogisticden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, Rcpp::NumericVector beta);
RcppExport SEXP _matrixdist_mloglogisticden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mloglogisticden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mloglogisticcdf
Rcpp::NumericVector mloglogisticcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, Rcpp::NumericVector beta, bool lower_tail);
RcppExport SEXP _matrixdist_mloglogisticcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mloglogisticcdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mgompertzden
Rcpp::NumericVector mgompertzden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta);
RcppExport SEXP _matrixdist_mgompertzden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mgompertzden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mgompertzcdf
Rcpp::NumericVector mgompertzcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mgompertzcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mgompertzcdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mgevden
Rcpp::NumericVector mgevden(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, Rcpp::NumericVector beta);
RcppExport SEXP _matrixdist_mgevden(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mgevden(x, alpha, S, beta));
    return rcpp_result_gen;
END_RCPP
}
// mgevcdf
Rcpp::NumericVector mgevcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, Rcpp::NumericVector beta, bool lower_tail);
RcppExport SEXP _matrixdist_mgevcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mgevcdf(x, alpha, S, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// dphdensity
Rcpp::NumericVector dphdensity(Rcpp::NumericVector x, arma::vec alpha, arma::mat S);
RcppExport SEXP _matrixdist_dphdensity(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(dphdensity(x, alpha, S));
    return rcpp_result_gen;
END_RCPP
}
// dphcdf
Rcpp::NumericVector dphcdf(Rcpp::NumericVector x, arma::vec alpha, arma::mat S, bool lower_tail);
RcppExport SEXP _matrixdist_dphcdf(SEXP xSEXP, SEXP alphaSEXP, SEXP SSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(dphcdf(x, alpha, S, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// bivph_density
Rcpp::NumericVector bivph_density(Rcpp::NumericMatrix x, arma::vec alpha, arma::mat S11, arma::mat S12, arma::mat S22);
RcppExport SEXP _matrixdist_bivph_density(SEXP xSEXP, SEXP alphaSEXP, SEXP S11SEXP, SEXP S12SEXP, SEXP S22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S11(S11SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S12(S12SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S22(S22SEXP);
    rcpp_result_gen = Rcpp::wrap(bivph_density(x, alpha, S11, S12, S22));
    return rcpp_result_gen;
END_RCPP
}
// bivph_tail
Rcpp::NumericVector bivph_tail(Rcpp::NumericMatrix x, arma::vec alpha, arma::mat S11, arma::mat S12, arma::mat S22);
RcppExport SEXP _matrixdist_bivph_tail(SEXP xSEXP, SEXP alphaSEXP, SEXP S11SEXP, SEXP S12SEXP, SEXP S22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S11(S11SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S12(S12SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S22(S22SEXP);
    rcpp_result_gen = Rcpp::wrap(bivph_tail(x, alpha, S11, S12, S22));
    return rcpp_result_gen;
END_RCPP
}
// EMstep_dph
void EMstep_dph(arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight);
RcppExport SEXP _matrixdist_EMstep_dph(SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    EMstep_dph(alpha, S, obs, weight);
    return R_NilValue;
END_RCPP
}
// EMstep_dph_MoE
arma::mat EMstep_dph_MoE(arma::mat& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight);
RcppExport SEXP _matrixdist_EMstep_dph_MoE(SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(EMstep_dph_MoE(alpha, S, obs, weight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodDPH
double logLikelihoodDPH(arma::vec& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight);
RcppExport SEXP _matrixdist_logLikelihoodDPH(SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodDPH(alpha, S, obs, weight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodDPH_MoE
double logLikelihoodDPH_MoE(arma::mat& alpha, arma::mat& S, const Rcpp::NumericVector& obs, const Rcpp::NumericVector& weight);
RcppExport SEXP _matrixdist_logLikelihoodDPH_MoE(SEXP alphaSEXP, SEXP SSEXP, SEXP obsSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodDPH_MoE(alpha, S, obs, weight));
    return rcpp_result_gen;
END_RCPP
}
// EM_step_mPH_rc
void EM_step_mPH_rc(arma::vec& alpha, Rcpp::List& S_list, const arma::mat y, const arma::mat delta, double h);
RcppExport SEXP _matrixdist_EM_step_mPH_rc(SEXP alphaSEXP, SEXP S_listSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type S_list(S_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    EM_step_mPH_rc(alpha, S_list, y, delta, h);
    return R_NilValue;
END_RCPP
}
// inf_norm
double inf_norm(arma::mat A);
RcppExport SEXP _matrixdist_inf_norm(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(inf_norm(A));
    return rcpp_result_gen;
END_RCPP
}
// matrix_vanloan
arma::mat matrix_vanloan(arma::mat A1, arma::mat A2, arma::mat B1);
RcppExport SEXP _matrixdist_matrix_vanloan(SEXP A1SEXP, SEXP A2SEXP, SEXP B1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A2(A2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B1(B1SEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_vanloan(A1, A2, B1));
    return rcpp_result_gen;
END_RCPP
}
// max_diagonal
double max_diagonal(const arma::mat& A);
RcppExport SEXP _matrixdist_max_diagonal(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(max_diagonal(A));
    return rcpp_result_gen;
END_RCPP
}
// matrix_exponential
arma::mat matrix_exponential(arma::mat A);
RcppExport SEXP _matrixdist_matrix_exponential(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_exponential(A));
    return rcpp_result_gen;
END_RCPP
}
// expmat
arma::mat expmat(arma::mat A);
RcppExport SEXP _matrixdist_expmat(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(expmat(A));
    return rcpp_result_gen;
END_RCPP
}
// matrix_power
arma::mat matrix_power(int n, arma::mat A);
RcppExport SEXP _matrixdist_matrix_power(SEXP nSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_power(n, A));
    return rcpp_result_gen;
END_RCPP
}
// vector_of_powers
std::vector<arma::mat> vector_of_powers(const arma::mat& A, int vect_size);
RcppExport SEXP _matrixdist_vector_of_powers(SEXP ASEXP, SEXP vect_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type vect_size(vect_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_of_powers(A, vect_size));
    return rcpp_result_gen;
END_RCPP
}
// default_step_length
double default_step_length(const NumericMatrix& S);
RcppExport SEXP _matrixdist_default_step_length(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(default_step_length(S));
    return rcpp_result_gen;
END_RCPP
}
// revers_data_trans
List revers_data_trans(const NumericVector& obs, const NumericVector& weights, const NumericVector& beta);
RcppExport SEXP _matrixdist_revers_data_trans(SEXP obsSEXP, SEXP weightsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(revers_data_trans(obs, weights, beta));
    return rcpp_result_gen;
END_RCPP
}
// clone_vector
NumericVector clone_vector(NumericVector v);
RcppExport SEXP _matrixdist_clone_vector(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_vector(v));
    return rcpp_result_gen;
END_RCPP
}
// clone_matrix
NumericMatrix clone_matrix(NumericMatrix m);
RcppExport SEXP _matrixdist_clone_matrix(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_matrix(m));
    return rcpp_result_gen;
END_RCPP
}
// sum_ph
Rcpp::List sum_ph(arma::rowvec alpha1, arma::mat S1, arma::rowvec alpha2, arma::mat S2);
RcppExport SEXP _matrixdist_sum_ph(SEXP alpha1SEXP, SEXP S1SEXP, SEXP alpha2SEXP, SEXP S2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S2(S2SEXP);
    rcpp_result_gen = Rcpp::wrap(sum_ph(alpha1, S1, alpha2, S2));
    return rcpp_result_gen;
END_RCPP
}
// sum_dph
Rcpp::List sum_dph(arma::rowvec alpha1, arma::mat S1, arma::rowvec alpha2, arma::mat S2);
RcppExport SEXP _matrixdist_sum_dph(SEXP alpha1SEXP, SEXP S1SEXP, SEXP alpha2SEXP, SEXP S2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S2(S2SEXP);
    rcpp_result_gen = Rcpp::wrap(sum_dph(alpha1, S1, alpha2, S2));
    return rcpp_result_gen;
END_RCPP
}
// random_structure
List random_structure(int p, String structure, double scale_factor);
RcppExport SEXP _matrixdist_random_structure(SEXP pSEXP, SEXP structureSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< String >::type structure(structureSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(random_structure(p, structure, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// random_structure_bivph
List random_structure_bivph(int p1, int p2, double scale_factor);
RcppExport SEXP _matrixdist_random_structure_bivph(SEXP p1SEXP, SEXP p2SEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< int >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(random_structure_bivph(p1, p2, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// merge_matrices
NumericMatrix merge_matrices(NumericMatrix S11, NumericMatrix S12, NumericMatrix S22);
RcppExport SEXP _matrixdist_merge_matrices(SEXP S11SEXP, SEXP S12SEXP, SEXP S22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S11(S11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S12(S12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S22(S22SEXP);
    rcpp_result_gen = Rcpp::wrap(merge_matrices(S11, S12, S22));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixdist_runge_kutta", (DL_FUNC) &_matrixdist_runge_kutta, 7},
    {"_matrixdist_EMstep_RK", (DL_FUNC) &_matrixdist_EMstep_RK, 7},
    {"_matrixdist_a_rungekutta", (DL_FUNC) &_matrixdist_a_rungekutta, 4},
    {"_matrixdist_logLikelihoodPH_RK", (DL_FUNC) &_matrixdist_logLikelihoodPH_RK, 7},
    {"_matrixdist_logLikelihoodMweibull_RK", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_RK, 8},
    {"_matrixdist_logLikelihoodMpareto_RK", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_RK, 8},
    {"_matrixdist_logLikelihoodMlognormal_RK", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_RK, 8},
    {"_matrixdist_logLikelihoodMloglogistic_RK", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_RK, 8},
    {"_matrixdist_logLikelihoodMgompertz_RK", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_RK, 8},
    {"_matrixdist_logLikelihoodMgev_RK", (DL_FUNC) &_matrixdist_logLikelihoodMgev_RK, 8},
    {"_matrixdist_logLikelihoodPH_RKs", (DL_FUNC) &_matrixdist_logLikelihoodPH_RKs, 9},
    {"_matrixdist_logLikelihoodMweibull_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_RKs, 10},
    {"_matrixdist_logLikelihoodMpareto_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_RKs, 10},
    {"_matrixdist_logLikelihoodMlognormal_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_RKs, 10},
    {"_matrixdist_logLikelihoodMloglogistic_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_RKs, 10},
    {"_matrixdist_logLikelihoodMgompertz_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_RKs, 10},
    {"_matrixdist_vector_of_matrices_2", (DL_FUNC) &_matrixdist_vector_of_matrices_2, 3},
    {"_matrixdist_EMstep_PADE", (DL_FUNC) &_matrixdist_EMstep_PADE, 7},
    {"_matrixdist_EMstep_MoE_PADE", (DL_FUNC) &_matrixdist_EMstep_MoE_PADE, 6},
    {"_matrixdist_EMstep_bivph", (DL_FUNC) &_matrixdist_EMstep_bivph, 6},
    {"_matrixdist_logLikelihoodPH_MoE", (DL_FUNC) &_matrixdist_logLikelihoodPH_MoE, 7},
    {"_matrixdist_logLikelihoodPH_PADE", (DL_FUNC) &_matrixdist_logLikelihoodPH_PADE, 7},
    {"_matrixdist_logLikelihoodMweibull_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_PADE, 8},
    {"_matrixdist_logLikelihoodMpareto_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_PADE, 8},
    {"_matrixdist_logLikelihoodMlognormal_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_PADE, 8},
    {"_matrixdist_logLikelihoodMloglogistic_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_PADE, 8},
    {"_matrixdist_logLikelihoodMgompertz_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_PADE, 8},
    {"_matrixdist_logLikelihoodMgev_PADE", (DL_FUNC) &_matrixdist_logLikelihoodMgev_PADE, 8},
    {"_matrixdist_logLikelihoodPH_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodPH_PADEs, 9},
    {"_matrixdist_logLikelihoodMweibull_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_PADEs, 10},
    {"_matrixdist_logLikelihoodMpareto_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_PADEs, 10},
    {"_matrixdist_logLikelihoodMlognormal_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_PADEs, 10},
    {"_matrixdist_logLikelihoodMloglogistic_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_PADEs, 10},
    {"_matrixdist_logLikelihoodMgompertz_PADEs", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_PADEs, 10},
    {"_matrixdist_vector_of_matrices", (DL_FUNC) &_matrixdist_vector_of_matrices, 4},
    {"_matrixdist_m_exp_sum", (DL_FUNC) &_matrixdist_m_exp_sum, 4},
    {"_matrixdist_pow2_matrix", (DL_FUNC) &_matrixdist_pow2_matrix, 2},
    {"_matrixdist_find_n", (DL_FUNC) &_matrixdist_find_n, 2},
    {"_matrixdist_EMstep_UNI", (DL_FUNC) &_matrixdist_EMstep_UNI, 7},
    {"_matrixdist_logLikelihoodPH_UNI", (DL_FUNC) &_matrixdist_logLikelihoodPH_UNI, 7},
    {"_matrixdist_logLikelihoodMweibull_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_UNI, 8},
    {"_matrixdist_logLikelihoodMpareto_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_UNI, 8},
    {"_matrixdist_logLikelihoodMlognormal_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_UNI, 8},
    {"_matrixdist_logLikelihoodMloglogistic_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_UNI, 8},
    {"_matrixdist_logLikelihoodMgompertz_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_UNI, 8},
    {"_matrixdist_logLikelihoodMgev_UNI", (DL_FUNC) &_matrixdist_logLikelihoodMgev_UNI, 8},
    {"_matrixdist_logLikelihoodPH_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodPH_UNIs, 9},
    {"_matrixdist_logLikelihoodMweibull_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodMweibull_UNIs, 10},
    {"_matrixdist_logLikelihoodMpareto_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodMpareto_UNIs, 10},
    {"_matrixdist_logLikelihoodMlognormal_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodMlognormal_UNIs, 10},
    {"_matrixdist_logLikelihoodMloglogistic_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodMloglogistic_UNIs, 10},
    {"_matrixdist_logLikelihoodMgompertz_UNIs", (DL_FUNC) &_matrixdist_logLikelihoodMgompertz_UNIs, 10},
    {"_matrixdist_expm_terms", (DL_FUNC) &_matrixdist_expm_terms, 3},
    {"_matrixdist_random_reward", (DL_FUNC) &_matrixdist_random_reward, 2},
    {"_matrixdist_rew_sanity_check", (DL_FUNC) &_matrixdist_rew_sanity_check, 2},
    {"_matrixdist_marginal_expectation", (DL_FUNC) &_matrixdist_marginal_expectation, 7},
    {"_matrixdist_MPHstar_EMstep_UNI", (DL_FUNC) &_matrixdist_MPHstar_EMstep_UNI, 6},
    {"_matrixdist_embedded_mc", (DL_FUNC) &_matrixdist_embedded_mc, 1},
    {"_matrixdist_cumulate_matrix", (DL_FUNC) &_matrixdist_cumulate_matrix, 1},
    {"_matrixdist_cumulate_vector", (DL_FUNC) &_matrixdist_cumulate_vector, 1},
    {"_matrixdist_initial_state", (DL_FUNC) &_matrixdist_initial_state, 2},
    {"_matrixdist_new_state", (DL_FUNC) &_matrixdist_new_state, 3},
    {"_matrixdist_rphasetype", (DL_FUNC) &_matrixdist_rphasetype, 3},
    {"_matrixdist_riph", (DL_FUNC) &_matrixdist_riph, 5},
    {"_matrixdist_rmatrixgev", (DL_FUNC) &_matrixdist_rmatrixgev, 6},
    {"_matrixdist_rdphasetype", (DL_FUNC) &_matrixdist_rdphasetype, 3},
    {"_matrixdist_rMPHstar", (DL_FUNC) &_matrixdist_rMPHstar, 4},
    {"_matrixdist_n_pos", (DL_FUNC) &_matrixdist_n_pos, 1},
    {"_matrixdist_n_null", (DL_FUNC) &_matrixdist_n_null, 1},
    {"_matrixdist_plus_states", (DL_FUNC) &_matrixdist_plus_states, 1},
    {"_matrixdist_null_states", (DL_FUNC) &_matrixdist_null_states, 1},
    {"_matrixdist_Q_pos_pos", (DL_FUNC) &_matrixdist_Q_pos_pos, 2},
    {"_matrixdist_Q_null_null", (DL_FUNC) &_matrixdist_Q_null_null, 2},
    {"_matrixdist_Q_pos_null", (DL_FUNC) &_matrixdist_Q_pos_null, 2},
    {"_matrixdist_Q_null_pos", (DL_FUNC) &_matrixdist_Q_null_pos, 2},
    {"_matrixdist_q_pos", (DL_FUNC) &_matrixdist_q_pos, 2},
    {"_matrixdist_q_null", (DL_FUNC) &_matrixdist_q_null, 2},
    {"_matrixdist_new_trans_mat", (DL_FUNC) &_matrixdist_new_trans_mat, 2},
    {"_matrixdist_new_trans_exit", (DL_FUNC) &_matrixdist_new_trans_exit, 2},
    {"_matrixdist_pi_pos", (DL_FUNC) &_matrixdist_pi_pos, 2},
    {"_matrixdist_pi_null", (DL_FUNC) &_matrixdist_pi_null, 2},
    {"_matrixdist_new_pi", (DL_FUNC) &_matrixdist_new_pi, 3},
    {"_matrixdist_new_exit_vec", (DL_FUNC) &_matrixdist_new_exit_vec, 3},
    {"_matrixdist_new_subint_mat", (DL_FUNC) &_matrixdist_new_subint_mat, 3},
    {"_matrixdist_transf_via_rew", (DL_FUNC) &_matrixdist_transf_via_rew, 4},
    {"_matrixdist_matrix_product", (DL_FUNC) &_matrixdist_matrix_product, 2},
    {"_matrixdist_matrix_inverse", (DL_FUNC) &_matrixdist_matrix_inverse, 1},
    {"_matrixdist_phdensity", (DL_FUNC) &_matrixdist_phdensity, 3},
    {"_matrixdist_phcdf", (DL_FUNC) &_matrixdist_phcdf, 4},
    {"_matrixdist_mweibullden", (DL_FUNC) &_matrixdist_mweibullden, 4},
    {"_matrixdist_mweibullcdf", (DL_FUNC) &_matrixdist_mweibullcdf, 5},
    {"_matrixdist_mparetoden", (DL_FUNC) &_matrixdist_mparetoden, 4},
    {"_matrixdist_mparetocdf", (DL_FUNC) &_matrixdist_mparetocdf, 5},
    {"_matrixdist_mlognormalden", (DL_FUNC) &_matrixdist_mlognormalden, 4},
    {"_matrixdist_mlognormalcdf", (DL_FUNC) &_matrixdist_mlognormalcdf, 5},
    {"_matrixdist_mloglogisticden", (DL_FUNC) &_matrixdist_mloglogisticden, 4},
    {"_matrixdist_mloglogisticcdf", (DL_FUNC) &_matrixdist_mloglogisticcdf, 5},
    {"_matrixdist_mgompertzden", (DL_FUNC) &_matrixdist_mgompertzden, 4},
    {"_matrixdist_mgompertzcdf", (DL_FUNC) &_matrixdist_mgompertzcdf, 5},
    {"_matrixdist_mgevden", (DL_FUNC) &_matrixdist_mgevden, 4},
    {"_matrixdist_mgevcdf", (DL_FUNC) &_matrixdist_mgevcdf, 5},
    {"_matrixdist_dphdensity", (DL_FUNC) &_matrixdist_dphdensity, 3},
    {"_matrixdist_dphcdf", (DL_FUNC) &_matrixdist_dphcdf, 4},
    {"_matrixdist_bivph_density", (DL_FUNC) &_matrixdist_bivph_density, 5},
    {"_matrixdist_bivph_tail", (DL_FUNC) &_matrixdist_bivph_tail, 5},
    {"_matrixdist_EMstep_dph", (DL_FUNC) &_matrixdist_EMstep_dph, 4},
    {"_matrixdist_EMstep_dph_MoE", (DL_FUNC) &_matrixdist_EMstep_dph_MoE, 4},
    {"_matrixdist_logLikelihoodDPH", (DL_FUNC) &_matrixdist_logLikelihoodDPH, 4},
    {"_matrixdist_logLikelihoodDPH_MoE", (DL_FUNC) &_matrixdist_logLikelihoodDPH_MoE, 4},
    {"_matrixdist_EM_step_mPH_rc", (DL_FUNC) &_matrixdist_EM_step_mPH_rc, 5},
    {"_matrixdist_inf_norm", (DL_FUNC) &_matrixdist_inf_norm, 1},
    {"_matrixdist_matrix_vanloan", (DL_FUNC) &_matrixdist_matrix_vanloan, 3},
    {"_matrixdist_max_diagonal", (DL_FUNC) &_matrixdist_max_diagonal, 1},
    {"_matrixdist_matrix_exponential", (DL_FUNC) &_matrixdist_matrix_exponential, 1},
    {"_matrixdist_expmat", (DL_FUNC) &_matrixdist_expmat, 1},
    {"_matrixdist_matrix_power", (DL_FUNC) &_matrixdist_matrix_power, 2},
    {"_matrixdist_vector_of_powers", (DL_FUNC) &_matrixdist_vector_of_powers, 2},
    {"_matrixdist_default_step_length", (DL_FUNC) &_matrixdist_default_step_length, 1},
    {"_matrixdist_revers_data_trans", (DL_FUNC) &_matrixdist_revers_data_trans, 3},
    {"_matrixdist_clone_vector", (DL_FUNC) &_matrixdist_clone_vector, 1},
    {"_matrixdist_clone_matrix", (DL_FUNC) &_matrixdist_clone_matrix, 1},
    {"_matrixdist_sum_ph", (DL_FUNC) &_matrixdist_sum_ph, 4},
    {"_matrixdist_sum_dph", (DL_FUNC) &_matrixdist_sum_dph, 4},
    {"_matrixdist_random_structure", (DL_FUNC) &_matrixdist_random_structure, 3},
    {"_matrixdist_random_structure_bivph", (DL_FUNC) &_matrixdist_random_structure_bivph, 3},
    {"_matrixdist_merge_matrices", (DL_FUNC) &_matrixdist_merge_matrices, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixdist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
