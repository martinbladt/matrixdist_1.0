// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// default_step_length
double default_step_length(const NumericMatrix& T);
RcppExport SEXP _matrixdist_default_step_length(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(default_step_length(T));
    return rcpp_result_gen;
END_RCPP
}
// runge_kutta
void runge_kutta(NumericMatrix& avector, NumericMatrix& bvector, NumericMatrix& cmatrix, double dt, double h, const NumericMatrix& T, const NumericMatrix& t);
RcppExport SEXP _matrixdist_runge_kutta(SEXP avectorSEXP, SEXP bvectorSEXP, SEXP cmatrixSEXP, SEXP dtSEXP, SEXP hSEXP, SEXP TSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type avector(avectorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type bvector(bvectorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type cmatrix(cmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type t(tSEXP);
    runge_kutta(avector, bvector, cmatrix, dt, h, T, t);
    return R_NilValue;
END_RCPP
}
// EMstep_RK
void EMstep_RK(double h, NumericVector& pi, NumericMatrix& T, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    EMstep_RK(h, pi, T, obs, weight, rcens, rcweight);
    return R_NilValue;
END_RCPP
}
// a_rungekutta
void a_rungekutta(NumericMatrix& avector, double dt, double h, const NumericMatrix& T);
RcppExport SEXP _matrixdist_a_rungekutta(SEXP avectorSEXP, SEXP dtSEXP, SEXP hSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type avector(avectorSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type T(TSEXP);
    a_rungekutta(avector, dt, h, T);
    return R_NilValue;
END_RCPP
}
// logLikelihoodPH_RK
double logLikelihoodPH_RK(double h, NumericVector& pi, NumericMatrix& T, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodPH_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_RK(h, pi, T, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodIPH_RK
double logLikelihoodIPH_RK(double h, NumericVector& pi, NumericMatrix& T, Function g, Function g_inv, Function lambda, NumericVector beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodIPH_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP gSEXP, SEXP g_invSEXP, SEXP lambdaSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< Function >::type g(gSEXP);
    Rcpp::traits::input_parameter< Function >::type g_inv(g_invSEXP);
    Rcpp::traits::input_parameter< Function >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodIPH_RK(h, pi, T, g, g_inv, lambda, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMWeib_RK
double logLikelihoodMWeib_RK(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMWeib_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMWeib_RK(h, pi, T, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMPar_RK
double logLikelihoodMPar_RK(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMPar_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMPar_RK(h, pi, T, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMLogLogistic_RK
double logLikelihoodMLogLogistic_RK(double h, NumericVector& pi, NumericMatrix& T, NumericVector beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMLogLogistic_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMLogLogistic_RK(h, pi, T, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMGomp_RK
double logLikelihoodMGomp_RK(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMGomp_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMGomp_RK(h, pi, T, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMGEV_RK
double logLikelihoodMGEV_RK(double h, NumericVector& pi, NumericMatrix& T, NumericVector beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_logLikelihoodMGEV_RK(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMGEV_RK(h, pi, T, beta, obs, weight, rcens, rcweight));
    return rcpp_result_gen;
END_RCPP
}
// reversTransformData
List reversTransformData(const NumericVector& observations, const NumericVector& weights, const NumericVector& beta);
RcppExport SEXP _matrixdist_reversTransformData(SEXP observationsSEXP, SEXP weightsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(reversTransformData(observations, weights, beta));
    return rcpp_result_gen;
END_RCPP
}
// EMstep_bivph
void EMstep_bivph(const NumericMatrix& observations, const NumericVector& weights, NumericVector& alpha, NumericMatrix& T11, NumericMatrix& T12, NumericMatrix& T22);
RcppExport SEXP _matrixdist_EMstep_bivph(SEXP observationsSEXP, SEXP weightsSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T22(T22SEXP);
    EMstep_bivph(observations, weights, alpha, T11, T12, T22);
    return R_NilValue;
END_RCPP
}
// EMstep
void EMstep(NumericVector& pi, NumericMatrix& T, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight);
RcppExport SEXP _matrixdist_EMstep(SEXP piSEXP, SEXP TSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    EMstep(pi, T, obs, weight, rcens, rcweight);
    return R_NilValue;
END_RCPP
}
// linear_combination
List linear_combination(NumericVector w, NumericVector pi, NumericMatrix T, NumericMatrix R);
RcppExport SEXP _matrixdist_linear_combination(SEXP wSEXP, SEXP piSEXP, SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_combination(w, pi, T, R));
    return rcpp_result_gen;
END_RCPP
}
// secondEMstep
void secondEMstep(const NumericMatrix& observations, const NumericVector& weight, const NumericMatrix& censored, const NumericVector& rcweight, NumericVector& pi, NumericMatrix& T, NumericMatrix& R);
RcppExport SEXP _matrixdist_secondEMstep(SEXP observationsSEXP, SEXP weightSEXP, SEXP censoredSEXP, SEXP rcweightSEXP, SEXP piSEXP, SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type censored(censoredSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type R(RSEXP);
    secondEMstep(observations, weight, censored, rcweight, pi, T, R);
    return R_NilValue;
END_RCPP
}
// sum_data
NumericVector sum_data(NumericMatrix x);
RcppExport SEXP _matrixdist_sum_data(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_data(x));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_RKs
double logLikelihoodPH_RKs(double h, NumericVector& pi, NumericMatrix& T, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodPH_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_RKs(h, pi, T, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodPH_RKs2
double logLikelihoodPH_RKs2(double h, NumericVector& pi, NumericMatrix& T, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodPH_RKs2(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodPH_RKs2(h, pi, T, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMWeib_RKs
double logLikelihoodMWeib_RKs(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMWeib_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMWeib_RKs(h, pi, T, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMPar_RKs
double logLikelihoodMPar_RKs(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMPar_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMPar_RKs(h, pi, T, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMLogLogistic_RKs
double logLikelihoodMLogLogistic_RKs(double h, NumericVector& pi, NumericMatrix& T, NumericVector beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMLogLogistic_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMLogLogistic_RKs(h, pi, T, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMGomp_RKs
double logLikelihoodMGomp_RKs(double h, NumericVector& pi, NumericMatrix& T, double beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMGomp_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMGomp_RKs(h, pi, T, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihoodMGEV_RKs
double logLikelihoodMGEV_RKs(double h, NumericVector& pi, NumericMatrix& T, NumericVector beta, const NumericVector& obs, const NumericVector& weight, const NumericVector& rcens, const NumericVector& rcweight, const NumericVector& scale1, const NumericVector& scale2);
RcppExport SEXP _matrixdist_logLikelihoodMGEV_RKs(SEXP hSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP obsSEXP, SEXP weightSEXP, SEXP rcensSEXP, SEXP rcweightSEXP, SEXP scale1SEXP, SEXP scale2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rcweight(rcweightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale1(scale1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale2(scale2SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihoodMGEV_RKs(h, pi, T, beta, obs, weight, rcens, rcweight, scale1, scale2));
    return rcpp_result_gen;
END_RCPP
}
// embeddedMC
NumericMatrix embeddedMC(NumericMatrix T);
RcppExport SEXP _matrixdist_embeddedMC(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(embeddedMC(T));
    return rcpp_result_gen;
END_RCPP
}
// cumulateMatrix
NumericMatrix cumulateMatrix(NumericMatrix A);
RcppExport SEXP _matrixdist_cumulateMatrix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cumulateMatrix(A));
    return rcpp_result_gen;
END_RCPP
}
// cumulateVector
NumericVector cumulateVector(NumericVector A);
RcppExport SEXP _matrixdist_cumulateVector(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cumulateVector(A));
    return rcpp_result_gen;
END_RCPP
}
// initialState
long initialState(NumericVector cumulatedPi, double u);
RcppExport SEXP _matrixdist_initialState(SEXP cumulatedPiSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cumulatedPi(cumulatedPiSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(initialState(cumulatedPi, u));
    return rcpp_result_gen;
END_RCPP
}
// newState
long newState(long previousState, NumericMatrix cumulatedEmbeddedMC, double u);
RcppExport SEXP _matrixdist_newState(SEXP previousStateSEXP, SEXP cumulatedEmbeddedMCSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type previousState(previousStateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cumulatedEmbeddedMC(cumulatedEmbeddedMCSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(newState(previousState, cumulatedEmbeddedMC, u));
    return rcpp_result_gen;
END_RCPP
}
// rphasetype
NumericVector rphasetype(int n, NumericVector pi, NumericMatrix T);
RcppExport SEXP _matrixdist_rphasetype(SEXP nSEXP, SEXP piSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(rphasetype(n, pi, T));
    return rcpp_result_gen;
END_RCPP
}
// riph
NumericVector riph(int n, String dist_type, NumericVector pi, NumericMatrix T, NumericVector beta);
RcppExport SEXP _matrixdist_riph(SEXP nSEXP, SEXP dist_typeSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< String >::type dist_type(dist_typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(riph(n, dist_type, pi, T, beta));
    return rcpp_result_gen;
END_RCPP
}
// rmatrixGEVD
NumericVector rmatrixGEVD(int n, NumericVector pi, NumericMatrix T, double mu, double sigma, double xi);
RcppExport SEXP _matrixdist_rmatrixGEVD(SEXP nSEXP, SEXP piSEXP, SEXP TSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatrixGEVD(n, pi, T, mu, sigma, xi));
    return rcpp_result_gen;
END_RCPP
}
// riphfn
NumericVector riphfn(int n, NumericVector pi, NumericMatrix T, Function g, NumericVector beta);
RcppExport SEXP _matrixdist_riphfn(SEXP nSEXP, SEXP piSEXP, SEXP TSEXP, SEXP gSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< Function >::type g(gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(riphfn(n, pi, T, g, beta));
    return rcpp_result_gen;
END_RCPP
}
// rmph
NumericMatrix rmph(int n, NumericVector pi, NumericMatrix T, NumericMatrix R);
RcppExport SEXP _matrixdist_rmph(SEXP nSEXP, SEXP piSEXP, SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(rmph(n, pi, T, R));
    return rcpp_result_gen;
END_RCPP
}
// rimph
NumericMatrix rimph(int n, String dist_type, NumericVector pi, NumericMatrix T, NumericMatrix R, NumericVector beta);
RcppExport SEXP _matrixdist_rimph(SEXP nSEXP, SEXP dist_typeSEXP, SEXP piSEXP, SEXP TSEXP, SEXP RSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< String >::type dist_type(dist_typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rimph(n, dist_type, pi, T, R, beta));
    return rcpp_result_gen;
END_RCPP
}
// phdensity
NumericVector phdensity(NumericVector x, NumericVector pi, NumericMatrix T);
RcppExport SEXP _matrixdist_phdensity(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(phdensity(x, pi, T));
    return rcpp_result_gen;
END_RCPP
}
// phcdf
NumericVector phcdf(NumericVector x, NumericVector pi, NumericMatrix T, bool lower_tail);
RcppExport SEXP _matrixdist_phcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(phcdf(x, pi, T, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// phmoment
NumericVector phmoment(IntegerVector k, NumericVector pi, NumericMatrix T);
RcppExport SEXP _matrixdist_phmoment(SEXP kSEXP, SEXP piSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(phmoment(k, pi, T));
    return rcpp_result_gen;
END_RCPP
}
// phLaplace
NumericVector phLaplace(NumericVector s, NumericVector pi, NumericMatrix T);
RcppExport SEXP _matrixdist_phLaplace(SEXP sSEXP, SEXP piSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(phLaplace(s, pi, T));
    return rcpp_result_gen;
END_RCPP
}
// iphdensity
NumericVector iphdensity(NumericVector x, NumericVector pi, NumericMatrix T, Function g, Function g_inv, Function lambda, NumericVector beta);
RcppExport SEXP _matrixdist_iphdensity(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP gSEXP, SEXP g_invSEXP, SEXP lambdaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< Function >::type g(gSEXP);
    Rcpp::traits::input_parameter< Function >::type g_inv(g_invSEXP);
    Rcpp::traits::input_parameter< Function >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(iphdensity(x, pi, T, g, g_inv, lambda, beta));
    return rcpp_result_gen;
END_RCPP
}
// iphcdf
NumericVector iphcdf(NumericVector x, NumericVector pi, NumericMatrix T, Function g, Function g_inv, NumericVector beta, bool lower_tail);
RcppExport SEXP _matrixdist_iphcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP gSEXP, SEXP g_invSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< Function >::type g(gSEXP);
    Rcpp::traits::input_parameter< Function >::type g_inv(g_invSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(iphcdf(x, pi, T, g, g_inv, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mWeibullden
NumericVector mWeibullden(NumericVector x, NumericVector pi, NumericMatrix T, double beta);
RcppExport SEXP _matrixdist_mWeibullden(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mWeibullden(x, pi, T, beta));
    return rcpp_result_gen;
END_RCPP
}
// mWeibullcdf
NumericVector mWeibullcdf(NumericVector x, NumericVector pi, NumericMatrix T, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mWeibullcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mWeibullcdf(x, pi, T, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// RunFunction
NumericVector RunFunction(NumericVector a, Function func);
RcppExport SEXP _matrixdist_RunFunction(SEXP aSEXP, SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Function >::type func(funcSEXP);
    rcpp_result_gen = Rcpp::wrap(RunFunction(a, func));
    return rcpp_result_gen;
END_RCPP
}
// mParetoden
NumericVector mParetoden(NumericVector x, NumericVector pi, NumericMatrix T, double beta);
RcppExport SEXP _matrixdist_mParetoden(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mParetoden(x, pi, T, beta));
    return rcpp_result_gen;
END_RCPP
}
// mParetocdf
NumericVector mParetocdf(NumericVector x, NumericVector pi, NumericMatrix T, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mParetocdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mParetocdf(x, pi, T, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mLogLogisticden
NumericVector mLogLogisticden(NumericVector x, NumericVector pi, NumericMatrix T, NumericVector beta);
RcppExport SEXP _matrixdist_mLogLogisticden(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mLogLogisticden(x, pi, T, beta));
    return rcpp_result_gen;
END_RCPP
}
// mLogLogisticcdf
NumericVector mLogLogisticcdf(NumericVector x, NumericVector pi, NumericMatrix T, NumericVector beta, bool lower_tail);
RcppExport SEXP _matrixdist_mLogLogisticcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mLogLogisticcdf(x, pi, T, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mGompertzden
NumericVector mGompertzden(NumericVector x, NumericVector pi, NumericMatrix T, double beta);
RcppExport SEXP _matrixdist_mGompertzden(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mGompertzden(x, pi, T, beta));
    return rcpp_result_gen;
END_RCPP
}
// mGompertzcdf
NumericVector mGompertzcdf(NumericVector x, NumericVector pi, NumericMatrix T, double beta, bool lower_tail);
RcppExport SEXP _matrixdist_mGompertzcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mGompertzcdf(x, pi, T, beta, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// mGEVDden
NumericVector mGEVDden(NumericVector x, NumericVector pi, NumericMatrix T, double mu, double sigma, double xi);
RcppExport SEXP _matrixdist_mGEVDden(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(mGEVDden(x, pi, T, mu, sigma, xi));
    return rcpp_result_gen;
END_RCPP
}
// mGEVDcdf
NumericVector mGEVDcdf(NumericVector x, NumericVector pi, NumericMatrix T, double mu, double sigma, double xi, bool lower_tail);
RcppExport SEXP _matrixdist_mGEVDcdf(SEXP xSEXP, SEXP piSEXP, SEXP TSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP lower_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(mGEVDcdf(x, pi, T, mu, sigma, xi, lower_tail));
    return rcpp_result_gen;
END_RCPP
}
// bivphden
NumericVector bivphden(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22);
RcppExport SEXP _matrixdist_bivphden(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    rcpp_result_gen = Rcpp::wrap(bivphden(x, alpha, T11, T12, T22));
    return rcpp_result_gen;
END_RCPP
}
// bivphtail
NumericVector bivphtail(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22);
RcppExport SEXP _matrixdist_bivphtail(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    rcpp_result_gen = Rcpp::wrap(bivphtail(x, alpha, T11, T12, T22));
    return rcpp_result_gen;
END_RCPP
}
// bivmWeibullden
NumericVector bivmWeibullden(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22, NumericVector beta);
RcppExport SEXP _matrixdist_bivmWeibullden(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bivmWeibullden(x, alpha, T11, T12, T22, beta));
    return rcpp_result_gen;
END_RCPP
}
// bimWeibulltail
NumericVector bimWeibulltail(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22, NumericVector beta);
RcppExport SEXP _matrixdist_bimWeibulltail(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bimWeibulltail(x, alpha, T11, T12, T22, beta));
    return rcpp_result_gen;
END_RCPP
}
// bivmParetoden
NumericVector bivmParetoden(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22, NumericVector beta);
RcppExport SEXP _matrixdist_bivmParetoden(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bivmParetoden(x, alpha, T11, T12, T22, beta));
    return rcpp_result_gen;
END_RCPP
}
// bimParetotail
NumericVector bimParetotail(NumericMatrix x, NumericVector alpha, NumericMatrix T11, NumericMatrix T12, NumericMatrix T22, NumericVector beta);
RcppExport SEXP _matrixdist_bimParetotail(SEXP xSEXP, SEXP alphaSEXP, SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bimParetotail(x, alpha, T11, T12, T22, beta));
    return rcpp_result_gen;
END_RCPP
}
// jointMGF
double jointMGF(const NumericVector& w, NumericVector pi, NumericMatrix T, NumericMatrix R);
RcppExport SEXP _matrixdist_jointMGF(SEXP wSEXP, SEXP piSEXP, SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(jointMGF(w, pi, T, R));
    return rcpp_result_gen;
END_RCPP
}
// matrix_product
NumericMatrix matrix_product(NumericMatrix a, NumericMatrix b);
RcppExport SEXP _matrixdist_matrix_product(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_product(a, b));
    return rcpp_result_gen;
END_RCPP
}
// matrix_sum
NumericMatrix matrix_sum(const NumericMatrix& A, const NumericMatrix& B);
RcppExport SEXP _matrixdist_matrix_sum(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_sum(A, B));
    return rcpp_result_gen;
END_RCPP
}
// LInf_norm
double LInf_norm(const NumericMatrix& A);
RcppExport SEXP _matrixdist_LInf_norm(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LInf_norm(A));
    return rcpp_result_gen;
END_RCPP
}
// solve_linear_system
NumericMatrix solve_linear_system(NumericMatrix A1, const NumericMatrix& B);
RcppExport SEXP _matrixdist_solve_linear_system(SEXP A1SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_linear_system(A1, B));
    return rcpp_result_gen;
END_RCPP
}
// matrix_inverse
NumericMatrix matrix_inverse(NumericMatrix A);
RcppExport SEXP _matrixdist_matrix_inverse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_inverse(A));
    return rcpp_result_gen;
END_RCPP
}
// matrix_exponential
NumericMatrix matrix_exponential(const NumericMatrix& A);
RcppExport SEXP _matrixdist_matrix_exponential(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_exponential(A));
    return rcpp_result_gen;
END_RCPP
}
// matrixMax
double matrixMax(const NumericMatrix& A);
RcppExport SEXP _matrixdist_matrixMax(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMax(A));
    return rcpp_result_gen;
END_RCPP
}
// matrixMaxDiagonal
double matrixMaxDiagonal(const NumericMatrix& A);
RcppExport SEXP _matrixdist_matrixMaxDiagonal(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMaxDiagonal(A));
    return rcpp_result_gen;
END_RCPP
}
// matrix_power
NumericMatrix matrix_power(int n, const NumericMatrix& A);
RcppExport SEXP _matrixdist_matrix_power(SEXP nSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_power(n, A));
    return rcpp_result_gen;
END_RCPP
}
// clone_vector
NumericVector clone_vector(NumericVector v);
RcppExport SEXP _matrixdist_clone_vector(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_vector(v));
    return rcpp_result_gen;
END_RCPP
}
// clone_matrix
NumericMatrix clone_matrix(NumericMatrix m);
RcppExport SEXP _matrixdist_clone_matrix(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_matrix(m));
    return rcpp_result_gen;
END_RCPP
}
// matrix_VanLoan
NumericMatrix matrix_VanLoan(const NumericMatrix& A1, const NumericMatrix& A2, const NumericMatrix& B1);
RcppExport SEXP _matrixdist_matrix_VanLoan(SEXP A1SEXP, SEXP A2SEXP, SEXP B1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A2(A2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B1(B1SEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_VanLoan(A1, A2, B1));
    return rcpp_result_gen;
END_RCPP
}
// diagonal_vector
NumericMatrix diagonal_vector(const NumericVector& vec);
RcppExport SEXP _matrixdist_diagonal_vector(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(diagonal_vector(vec));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _matrixdist_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// random_structure
List random_structure(int p, String structure, double scale_factor);
RcppExport SEXP _matrixdist_random_structure(SEXP pSEXP, SEXP structureSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< String >::type structure(structureSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(random_structure(p, structure, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// random_reward
NumericMatrix random_reward(int p, int dim);
RcppExport SEXP _matrixdist_random_reward(SEXP pSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(random_reward(p, dim));
    return rcpp_result_gen;
END_RCPP
}
// norm_mph
void norm_mph(NumericMatrix T, NumericMatrix R);
RcppExport SEXP _matrixdist_norm_mph(SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    norm_mph(T, R);
    return R_NilValue;
END_RCPP
}
// merge_matrices
NumericMatrix merge_matrices(NumericMatrix T11, NumericMatrix T12, NumericMatrix T22);
RcppExport SEXP _matrixdist_merge_matrices(SEXP T11SEXP, SEXP T12SEXP, SEXP T22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T11(T11SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T12(T12SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T22(T22SEXP);
    rcpp_result_gen = Rcpp::wrap(merge_matrices(T11, T12, T22));
    return rcpp_result_gen;
END_RCPP
}
// random_phase_BivPH
List random_phase_BivPH(int p1, int p2, double scale_factor);
RcppExport SEXP _matrixdist_random_phase_BivPH(SEXP p1SEXP, SEXP p2SEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< int >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(random_phase_BivPH(p1, p2, scale_factor));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixdist_default_step_length", (DL_FUNC) &_matrixdist_default_step_length, 1},
    {"_matrixdist_runge_kutta", (DL_FUNC) &_matrixdist_runge_kutta, 7},
    {"_matrixdist_EMstep_RK", (DL_FUNC) &_matrixdist_EMstep_RK, 7},
    {"_matrixdist_a_rungekutta", (DL_FUNC) &_matrixdist_a_rungekutta, 4},
    {"_matrixdist_logLikelihoodPH_RK", (DL_FUNC) &_matrixdist_logLikelihoodPH_RK, 7},
    {"_matrixdist_logLikelihoodIPH_RK", (DL_FUNC) &_matrixdist_logLikelihoodIPH_RK, 11},
    {"_matrixdist_logLikelihoodMWeib_RK", (DL_FUNC) &_matrixdist_logLikelihoodMWeib_RK, 8},
    {"_matrixdist_logLikelihoodMPar_RK", (DL_FUNC) &_matrixdist_logLikelihoodMPar_RK, 8},
    {"_matrixdist_logLikelihoodMLogLogistic_RK", (DL_FUNC) &_matrixdist_logLikelihoodMLogLogistic_RK, 8},
    {"_matrixdist_logLikelihoodMGomp_RK", (DL_FUNC) &_matrixdist_logLikelihoodMGomp_RK, 8},
    {"_matrixdist_logLikelihoodMGEV_RK", (DL_FUNC) &_matrixdist_logLikelihoodMGEV_RK, 8},
    {"_matrixdist_reversTransformData", (DL_FUNC) &_matrixdist_reversTransformData, 3},
    {"_matrixdist_EMstep_bivph", (DL_FUNC) &_matrixdist_EMstep_bivph, 6},
    {"_matrixdist_EMstep", (DL_FUNC) &_matrixdist_EMstep, 6},
    {"_matrixdist_linear_combination", (DL_FUNC) &_matrixdist_linear_combination, 4},
    {"_matrixdist_secondEMstep", (DL_FUNC) &_matrixdist_secondEMstep, 7},
    {"_matrixdist_sum_data", (DL_FUNC) &_matrixdist_sum_data, 1},
    {"_matrixdist_logLikelihoodPH_RKs", (DL_FUNC) &_matrixdist_logLikelihoodPH_RKs, 9},
    {"_matrixdist_logLikelihoodPH_RKs2", (DL_FUNC) &_matrixdist_logLikelihoodPH_RKs2, 9},
    {"_matrixdist_logLikelihoodMWeib_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMWeib_RKs, 10},
    {"_matrixdist_logLikelihoodMPar_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMPar_RKs, 10},
    {"_matrixdist_logLikelihoodMLogLogistic_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMLogLogistic_RKs, 10},
    {"_matrixdist_logLikelihoodMGomp_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMGomp_RKs, 10},
    {"_matrixdist_logLikelihoodMGEV_RKs", (DL_FUNC) &_matrixdist_logLikelihoodMGEV_RKs, 10},
    {"_matrixdist_embeddedMC", (DL_FUNC) &_matrixdist_embeddedMC, 1},
    {"_matrixdist_cumulateMatrix", (DL_FUNC) &_matrixdist_cumulateMatrix, 1},
    {"_matrixdist_cumulateVector", (DL_FUNC) &_matrixdist_cumulateVector, 1},
    {"_matrixdist_initialState", (DL_FUNC) &_matrixdist_initialState, 2},
    {"_matrixdist_newState", (DL_FUNC) &_matrixdist_newState, 3},
    {"_matrixdist_rphasetype", (DL_FUNC) &_matrixdist_rphasetype, 3},
    {"_matrixdist_riph", (DL_FUNC) &_matrixdist_riph, 5},
    {"_matrixdist_rmatrixGEVD", (DL_FUNC) &_matrixdist_rmatrixGEVD, 6},
    {"_matrixdist_riphfn", (DL_FUNC) &_matrixdist_riphfn, 5},
    {"_matrixdist_rmph", (DL_FUNC) &_matrixdist_rmph, 4},
    {"_matrixdist_rimph", (DL_FUNC) &_matrixdist_rimph, 6},
    {"_matrixdist_phdensity", (DL_FUNC) &_matrixdist_phdensity, 3},
    {"_matrixdist_phcdf", (DL_FUNC) &_matrixdist_phcdf, 4},
    {"_matrixdist_phmoment", (DL_FUNC) &_matrixdist_phmoment, 3},
    {"_matrixdist_phLaplace", (DL_FUNC) &_matrixdist_phLaplace, 3},
    {"_matrixdist_iphdensity", (DL_FUNC) &_matrixdist_iphdensity, 7},
    {"_matrixdist_iphcdf", (DL_FUNC) &_matrixdist_iphcdf, 7},
    {"_matrixdist_mWeibullden", (DL_FUNC) &_matrixdist_mWeibullden, 4},
    {"_matrixdist_mWeibullcdf", (DL_FUNC) &_matrixdist_mWeibullcdf, 5},
    {"_matrixdist_RunFunction", (DL_FUNC) &_matrixdist_RunFunction, 2},
    {"_matrixdist_mParetoden", (DL_FUNC) &_matrixdist_mParetoden, 4},
    {"_matrixdist_mParetocdf", (DL_FUNC) &_matrixdist_mParetocdf, 5},
    {"_matrixdist_mLogLogisticden", (DL_FUNC) &_matrixdist_mLogLogisticden, 4},
    {"_matrixdist_mLogLogisticcdf", (DL_FUNC) &_matrixdist_mLogLogisticcdf, 5},
    {"_matrixdist_mGompertzden", (DL_FUNC) &_matrixdist_mGompertzden, 4},
    {"_matrixdist_mGompertzcdf", (DL_FUNC) &_matrixdist_mGompertzcdf, 5},
    {"_matrixdist_mGEVDden", (DL_FUNC) &_matrixdist_mGEVDden, 6},
    {"_matrixdist_mGEVDcdf", (DL_FUNC) &_matrixdist_mGEVDcdf, 7},
    {"_matrixdist_bivphden", (DL_FUNC) &_matrixdist_bivphden, 5},
    {"_matrixdist_bivphtail", (DL_FUNC) &_matrixdist_bivphtail, 5},
    {"_matrixdist_bivmWeibullden", (DL_FUNC) &_matrixdist_bivmWeibullden, 6},
    {"_matrixdist_bimWeibulltail", (DL_FUNC) &_matrixdist_bimWeibulltail, 6},
    {"_matrixdist_bivmParetoden", (DL_FUNC) &_matrixdist_bivmParetoden, 6},
    {"_matrixdist_bimParetotail", (DL_FUNC) &_matrixdist_bimParetotail, 6},
    {"_matrixdist_jointMGF", (DL_FUNC) &_matrixdist_jointMGF, 4},
    {"_matrixdist_matrix_product", (DL_FUNC) &_matrixdist_matrix_product, 2},
    {"_matrixdist_matrix_sum", (DL_FUNC) &_matrixdist_matrix_sum, 2},
    {"_matrixdist_LInf_norm", (DL_FUNC) &_matrixdist_LInf_norm, 1},
    {"_matrixdist_solve_linear_system", (DL_FUNC) &_matrixdist_solve_linear_system, 2},
    {"_matrixdist_matrix_inverse", (DL_FUNC) &_matrixdist_matrix_inverse, 1},
    {"_matrixdist_matrix_exponential", (DL_FUNC) &_matrixdist_matrix_exponential, 1},
    {"_matrixdist_matrixMax", (DL_FUNC) &_matrixdist_matrixMax, 1},
    {"_matrixdist_matrixMaxDiagonal", (DL_FUNC) &_matrixdist_matrixMaxDiagonal, 1},
    {"_matrixdist_matrix_power", (DL_FUNC) &_matrixdist_matrix_power, 2},
    {"_matrixdist_clone_vector", (DL_FUNC) &_matrixdist_clone_vector, 1},
    {"_matrixdist_clone_matrix", (DL_FUNC) &_matrixdist_clone_matrix, 1},
    {"_matrixdist_matrix_VanLoan", (DL_FUNC) &_matrixdist_matrix_VanLoan, 3},
    {"_matrixdist_diagonal_vector", (DL_FUNC) &_matrixdist_diagonal_vector, 1},
    {"_matrixdist_rcpp_hello_world", (DL_FUNC) &_matrixdist_rcpp_hello_world, 0},
    {"_matrixdist_random_structure", (DL_FUNC) &_matrixdist_random_structure, 3},
    {"_matrixdist_random_reward", (DL_FUNC) &_matrixdist_random_reward, 2},
    {"_matrixdist_norm_mph", (DL_FUNC) &_matrixdist_norm_mph, 2},
    {"_matrixdist_merge_matrices", (DL_FUNC) &_matrixdist_merge_matrices, 3},
    {"_matrixdist_random_phase_BivPH", (DL_FUNC) &_matrixdist_random_phase_BivPH, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixdist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
